
(def-foreign-lib Kernel32 "Kernel32.dll")

; (declare-type-aliases
;   ; LPVOID rawptr
;   DWORD u32)

(declare-foreigns Kernel32
  (GetLastError [] -> u32)
  (GetProcessHeap [] -> rawptr)
  (HeapAlloc [(heap rawptr) (flags u32) (nbytes uint)] -> rawptr))

(defn allocate [(nbytes uint)] -> [(memory rawptr)]
  (HeapAlloc (GetProcessHeap) 0 nbytes))

(defn cstring [(s String)] -> [rawptr]
  (do
    (let cs (allocate (+ 1 s/count)))
    (memcopy cs s/data s/count)
    (set (+ cs s/count) 0)
    cs))

(defstruct Point
  (x int)
  (y int))

(defstruct String
  (count int)
  (data rawptr))

(defstruct File-Time
  (low-date-time u32)
  (high-date-time u32))

(defstruct Win32-Find-Data
  (file-attributes u32)
  (creation-time File-Time)
  (last-access-time File-Time)
  (last-write-time File-Time)
  (file-size-high u32)
  (file-size-low u32)
  (reserved0 u32)
  (reserved1 u32)
  (file-name [u16 260])
  (alternate-file-name [u16 14])
  (_obsolete_file-type u32)
  (_obsolete_creator-type u32)
  (_obsolete_finder-flags u16))

(defstruct Caller-Context
  (thread rawptr)
  (allocator rawptr)
  (allocator-data rawptr)
  (thread-locals rawptr))

(defn root-allocator-proc
  [(op int) (nbytes int) (alignment int)]
  -> [(memory rawptr)]
  (do
    (allocate nbytes)))

(defn main [] -> [_]
  (do
    (let dir (cstring ".\\*"))
    (let file-data (new Win32-Find-Data))
    ; (let f (x/proc root-allocator-proc))
    dir))




; (defn main []
;   (do
;     (let dir LPCSTR ".\\*")
;     (let file-data WIN32_FIND_DATA ---)
;     (let finder (FindFirstFile dir #'file-data))
;     (when (= INVALID_HANDLE_VALUE finder)
;       (panic! "failed to FindFirstFile"))
    
;     (jumppad :loop
;       (if (b-and FILE_ATTRIBUTE_DIRECTORY (:dwFileAttributes file-data))
;         <RECUR>
;         (do
;           (let name (:cFileName file-data))
          
;           ;; .. check file name
;           ;; .. get file handle
          
;           ;; this is not a simple local. specifics of data representation
;           ;; are abstracted away
;           ;; particularly error information
;           (let ?text (read-entire-file file))
;           (when (return-is :success ?text)
;             (let text (as :success ?text))
;             (let nlines 1)
;             (let i 0)
;             (jumppad
;               :fileit
;               (when (< i (count text))
;                 (goto :body-))
;               :body-
;               (do
;                 (let b (at text i))
;                 (when (= b #ch "\n")
;                   (set nlines (inc nlines)))
;                 (set i (inc i))
;                 (goto :fileit))))
          
;           (let res (FindNextFile finder #'file-data))
;           (when (not= 0 res)
;             (goto :loop)))))
    
;     (let error (GetLastError))
;     (FindClose finder)
;     (when (not= error ERROR_NO_MORE_FILES)
;       (panic! "error!"))))
