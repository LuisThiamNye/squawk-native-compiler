
#_(def struct
  (make-macro-fn
    .param-syms [:form]
    .code
    (quote
      (make-struct
        .members))))

;; intrinsics:
;; macros: [fn struct let do set if cast foreign-proc]
;; functions: [foreign-library + - *]

#_(def Counted-Array
  (struct
    (count int)
    (data rawptr)))

; (def Any
;   (struct
;     (type Type-Info)
;     (data rawptr)))


(def win-max-path 260)

(def Foreign-Lib
  (struct
    (path String)))

(def foreign-library
  (fn [(path String)] -> (_ Foreign-Lib)
    (do
      (let lib (new Foreign-Lib))
      (set lib/path path)
      lib)))

(def Foreign-Proc-C-Type
  (enum
    [:nil :void :bool :char :short :int :long :longlong
     :float :double :pointer :aggregate]))

(def Decl-Foreign-Proc
  (struct
    (name String)
    (lib Foreign-Lib)
    (param-types (tArr Foreign-Proc-C-Type))
    #_(ret-type Foreign-Proc-C-Type)
    (ret-typeinfo *Type-Info)))

(def foreign-proc
  (fn [(params (tArr Any))
       (ret-type *Type-Info)
       (name String)
       (lib Foreign-Lib)]
    -> (_ Decl-Foreign-Proc)
    (do
      (let r (new Decl-Foreign-Proc))
      (set r/name name)
      (set r/lib lib)
      ; (set r/ret-type ret-type)

      ; (prn r)
      ; (prn ret-type)
      ; (prn r/ret-typeinfo)
      (set r/ret-typeinfo ret-type)
      
      #_(set r/param-types (make-arr Foreign-Proc-C-Type params/count))
      r)))

(def typeinfo-to-foreign-c-type
  (fn [(typeinfo Type-Info)]
    -> (_ Foreign-Proc-C-Type)
    ;; problem: C's int could be 32 or 64 bits depending
    ;; on how the library was compiled
    (case typeinfo/tag
      [:void :void]
      [:bool :bool]
      [:integer
       (do
         (let nbits typeinfo/integer/nbits)
         (case nbits
           [8 :char]
           [16 :short]
           [32 :int]
           [64 :longlong]))]
      [:float
       (do
         (let nbits typeinfo/float/nbits)
         (case nbits
           [32 :float]
           [64 :double]))]
      [:pointer :pointer])))

(def CALL_C_X86_WIN32_STD 2)

(def invoke-foreign-proc
  (fn [(fp Decl-Foreign-Proc)
       (args (tArr Any))]
    -> (_ Any)
    (do
      ; (prn fp)
      ; (prn fp/ret-typeinfo)
      (bootstrap-foreign-dyncall
        ; fp/lib/path
        "Kernel32.dll"
        fp/name
        CALL_C_X86_WIN32_STD
        args
        fp/ret-typeinfo))
    #_(do
      (let i 0)
      (let param-types fp/param-types)
      (jumps :loop
        (do
          (if (< i args/count)
            (do
              (let arg (args i))
              (let argti arg/type)
              (let pct (param-types i))
              ;; .......
              (set' i (+ 1 i))
              (goto :loop))
            0))))))


;; TODO dynamic arrays demo/test cases
(def Dynamic-Array
  (struct
    (count int)
    (data rawptr)
    (capacity int)))

(def make-dyn-array
  (fn [(item-type *Type-Info)] -> Dynamic-Array
    .[(let *ary (mut Dynamic-Array))
      (set *ary/count 0)
      (set *ary/capacity 0)
      (assoc-meta ary
        :item-type item-type)]))

(def append
  (fn [(*array *Dynamic-Array)
       ; (item (:item-type (meta array)))
       (item Any)]
    .[; (Λ array @*array)
      (Λ item-type (:item-type (meta #'array)))
      (if (not= (type-of item) item-type)
        (panic! "invalid item type"))
      (Λ item (cast item-type item))
      (if (= array/count array/capacity)
        (do
          (Λ old-data array/data)
          (Λ c1 array/count)
          (Λ c2 (+ 1 array/count))
          (set *array/data (allocate c2))
          (memcopy array/data old-data c1)
          (deallocate old-data c1)
          (set *array/capacity (+ 8 (* 2 array/capacity)))))
      (do
        (memcopy (ptr-offset array/data array/count)
          *item (:size item-type))
        (set *array/count (+ 1 array/count)))]))



(def Wstring *u16)

(def Kernel32 (foreign-library "Kernel32.dll"))

(def Win-Handle uintptr)

; (def GetLastError (foreign-proc [] u32 "GetLastError" Kernel32))
(def GetProcessHeap (foreign-proc [] rawptr "GetProcessHeap" Kernel32))
(def HeapAlloc
  (foreign-proc [[:heap rawptr] [:flags u32] [:nbytes uint]]
    rawptr "HeapAlloc" Kernel32))
(def FindFirstFile
  (foreign-proc [[:file-name Wstring] [:find-data *Win32-Find-Data]]
    Win-Handle "FindFirstFileW" Kernel32))
(def MultiByteToWideChar
  (foreign-proc [[:code-page u32] [:flags u32]
                 [:multi-byte-str *u8] [:multi-byte-count s32]
                 [:wide-char-str Wstring] [:wide-char-count s32]]
    s32 "MultiByteToWideChar" Kernel32))
(def WideCharToMultiByte
  (foreign-proc [[:code-page u32] [:flags u32]
                 [:wide-char-str Wstring] [:wide-char-count s32]
                 [:multi-byte-str *u8] [:multi-byte-count s32]
                 [:default-char *u8] [:used-default-char *bool]]
    s32 "WideCharToMultiByte" Kernel32))

(def str->wstr
  (fn [(input String)] -> Wstring
    (do
      (let CP_UTF8 (cast u32 65001))
      (let wcount
        (MultiByteToWideChar
          CP_UTF8 (cast u32 0)
          input/data (cast s32 input/count)
          nil (cast s32)))
      ;; TODO do something if wcount=0 (failed to convert)
      (let wstr (cast Wstring (allocate (mul wcount 2))))
      (MultiByteToWideChar
        CP_UTF8 (cast u32 0)
        input/data (cast s32 input/count)
        wstr wcount)
      wstr)))

(def str->path-wstr
  (fn [(input String)] -> Wstring
    (do
      (let CP_UTF8 (cast u32 65001))
      (let wcount win-max-path)
      (if (= 0 wcount)
        (panic! "failed to convert"))
      (let wstr (cast Wstring (allocate (mul wcount 2))))
      (MultiByteToWideChar
        CP_UTF8 (cast u32 0)
        input/data (cast s32 input/count)
        wstr (cast s32 wcount))
      wstr)))

(def prn-wstr
  (fn [(input Wstring)]
    (do
      (let i' (new int))
      (jumps :loop
        (do
          (let i (deref i'))
          (let c (deref (ptr-offset input i)))
          (prn c)
          (set i' (+ 1 i))
          (if (= c 0)
            nil
            (goto :loop)))))))

(def wstr->str
  (fn [(input Wstring) (length int)] -> String
    (do
      (let CP_UTF8 (cast u32 65001))
      (let bcount
        (WideCharToMultiByte
          CP_UTF8 (cast u32 0)
          input (cast s32 length)
          nil (cast s32 0)
          nil nil))
      (if (= 0 bcount)
        (panic! "failed to convert"))
      (let bstr' (new String))
      (set bstr'/count (cast s64 bcount))
      (set bstr'/data (cast *u8 (allocate (cast s64 bcount))))
      ; (prn (deref bstr'))
      ; (prn bstr')
      (WideCharToMultiByte
        CP_UTF8 (cast u32 0)
        input (cast s32 length)
        (deref bstr'/data) bcount
        nil nil)
      bstr')))


;; FIXME: does not work because returns a typeinfo of
;; a different pointer to canonical s64.
;; this is because Type-Info is stored by value
;; in the foreign proc struct, so gets copied.
(def allocate
  (fn [(nbytes int)] -> (memory rawptr)
    (do
      (let HEAP_ZERO_MEMORY 8)
      (HeapAlloc (GetProcessHeap) HEAP_ZERO_MEMORY nbytes))))

(def cstring
  (fn [(s String)] -> rawptr
    (do
      (let cs (allocate (+ 1 s/count)))
      (memcopy cs s/data s/count)
      cs)))

(def Point
  (struct
    (x int)
    (y int)))

#_(def String
  (struct
    (count int)
    (data rawptr)))

(def File-Time
  (struct
    (low-date-time u32)
    (high-date-time u32)))

(def Win32-File-Name
  (tArr u16 win-max-path))

(def Win32-Find-Data
  (struct
    (file-attributes u32)
    (creation-time File-Time)
    (last-access-time File-Time)
    (last-write-time File-Time)
    (file-size-high u32)
    (file-size-low u32)
    (reserved0 u32)
    (reserved1 u32)
    (file-name Win32-File-Name)
    (alternate-file-name (tArr u16 14))
    (_obsolete_file-type u32)
    (_obsolete_creator-type u32)
    (_obsolete_finder-flags u16)))

(def Caller-Context
  (struct
    (thread rawptr)
    (allocator rawptr)
    (allocator-data rawptr)
    (thread-locals rawptr)))

(def root-allocator-proc
  (fn [(op int) (nbytes int) (alignment int)]
    -> (memory rawptr)
    (do
      (allocate nbytes))))


(def main
  (do
    (bootstrap-register-data-invoker Decl-Foreign-Proc
      invoke-foreign-proc)
    (fn []
      (do
        (let root-dir ".\*")
        (let root-dir-w (str->path-wstr root-dir))
        (let Stack-Frame (struct
                           (file-name Win32-File-Name)))
        (let file-data' (new Win32-Find-Data))
        (let stack (make-dyn-array Stack-Frame))
        (let dir-w root-dir-w)
        
        ; (prn-wstr dir-w)
        ; (prn (wstr->str dir-w win-max-path))

        (let INVALID_HANDLE_VALUE -1)
        (let finder (FindFirstFile dir-w file-data'))
        (if (= INVALID_HANDLE_VALUE finder)
          (panic! "failed to FindFirstFile"))
        
        (let file-data (deref file-data'))
        (let FILE_ATTRIBUTE_DIRECTORY 0x00000010)
        (let name (wstr->str (cast *u16 file-data'/file-name) win-max-path))
        (if (< 0 (b-and FILE_ATTRIBUTE_DIRECTORY file-data/file-attributes))
          (do
            (prn name)
            (let fr (new Stack-Frame))
            (set fr/file-name (deref file-data'/file-name))
            (append *stack fr)
            (panic! "dir"))
          (do
            (prn name)))
        
        (panic! "ok")))))