
"
Emphasis on:
- Factorability
- Performance
- Simplicity
- User control and power / flexibility
- Conciseness

top level definitions
- global data
- type defs (structs, unions, enums)
- functions

Factorability
- aim to make it easier to manipulate than traditional lispy languages
  eg when trying to insert prn between expressions
- aim to maximise flexibility with a few powerful macros for control flow,
  rather than having many macros for specific situations
"

;; rather than overusing macros, would be good to have a convenient way to 
;; quickly set up templates to create new empty function declarations
;; (e.g. with parameters filled in). Other refactoring features reduce the need
;; for abstraction with macros, as it is easier to update a large number of functions

;; basic types
;;;;;;;;;;;

bool
uN
sN
f32 f64
void
int = s64
float = float32

;; typedefs

char = u32
;; user controls implicit casting/whether arithmetic is allowed

;; string
(struct
  :count int
  :data *u8)

;; Any type
(struct
  :type *TypeInfo
  :value *void)

;; casting
"Widening without loss of information is implicit."

(as TYPE expr)
"Performs runtime bounds checking if appropriate, as an assertion."

(trunc TYPE expr)
"Casts without bounds check, for when losing information is intentional"

"Others:
arrays -> array view
_ -> Any
one-char string -> character
"

;; structs
;;;;;;;;;;;;;;;;
"Interesting things to look at: union types (instead of Maybe/Optional), clojure.spec2, Scala 3/Dotty"

;; anonymous struct

(struct
  :x int
  :y int)

(struct ;; equivalent to union
  :a s32
  :b ^:as f64 ;; as enables implict casting to this member
  {:place :a}
  :c int
  {:place :a
   :align 16})

;; accessing members

(:x point)
;; works through pointers
(fn [obj^*MyStruct]
  (:x obj))

;; allow overriding member access to achieve aliases to inner structs
(accessor my-struct ;; (:x my-struct)
  (-> my-struct :entity :pos :x))

(setter my-struct
  (setm (-> my-struct :entity :pos) :x &value))

;; polymorphism: supertype to subtype

Entity (struct
         (:x int))
Door (struct
       (:entity ^:using Entity))
;; If referred class Entity is not a pointer, Entity can be cast to Door
;; as long as you have a pointer to the entity (the offset to door is known)
(as *Door entity-ptr)

;; providing code to find the sub from super
Entity (struct
         (:type EntityType)
         ;; note: instead of using a pointer, could use a smaller index that is looked up in an array
         (:specialisation rawptr))
Door (struct
       (:entity ^:using *Entity
         :has-self (= :door (:type &data))
         :get-self (:specialisation &data)))
(when (isa? entity Door)
  (as Door entity))

;; like spec
::x (spec/type int)  ::y (spec/type int)
::position (spec/set [::x ::y])
::specialisation (spec/union [::door])
::entity (spec/set [::position ::specialisation])
::door (spec/merge [(spec/except ::entity [::specialisation])
                    (spec/set [::angle])])

::x (spec/type int)  ::y (spec/type int)
::position (spec/set [::x ::y])
::entity (spec/set [::position])
::door (spec/merge [::entity (spec/set [::angle])]) ;; implies ::door is ::entity

(isa? entity ::door)
(spec/select ::door [::angle])
Entity (struct :is [::entity]
         :keys [::position])
Door (struct :is [::door]
       :use Entity
       :keys [::angle])

;; heirarchy of contexts
::class-ctx (spec/set [::name])
::method-ctx (spec/set [::class-ctx ::name])
ClassCtx (struct :is [::class-ctx]
           :keys [::name]
           (:method-ctxs [MethodCtx]))
MethodCtx (struct :is [::method-ctx]
            :keys [::name])
myfn (fn [(args (struct
                  (:method-ctx ^:use *MethodCtx)
                  (:class-ctx *ClassCtx)))])
[*MethodCtx *ClassCtx] ;; implementation of function parameters (two pointers)
(myfn {:class-ctx cctx :method-ctx mctx})
;; perhaps parameters always define a struct
myfn (fn [(method-ctx ^:use *MethodCtx)
          (class-ctx *ClassCtx)]
       name #_"from using method-ctx")

;; enums
;;;;;;;;;;;

(enum
  :alpha
  :beta 3
  :gamma)

(enum u32
  :a :b)

(enum-flags
  :alpha ;; 0b001
  :beta ;; 0b010
  :gamma)

;; unions
;;;;;;;;;;;

(union
  :thing1
  :thing2)

;; keywords
;;;;;;;;;;;;;;;;;;;;;;;

:keyword ;; implicit keyword gets inferred contextually to an exact keyword
::ns/keyword ;; exact keyword/attribute

;; functions
;;;;;;;;;;;;;;

;; implicit context pointer passed to each function that needs it
(struct
  :allocator
  ; :temp-allocator
  :user-data)

;; implicit contextual parameters
(fn f [::x y] ...)
(with-params [::x 2]
  (f 5))
(f 2 5)

;; code
;;;;;;;;;;;;;;

;; imagine the UI showing a 'mut' label if the local gets assigned
;; This reduces friction of writing the local, and defers the decision
;; of mutability. Perhaps metadata could be explicity applied if you want to
;; enforce something.
(let x 1
  (do (set x (+ x 2))
    (swap x inc)
    x))

"Default inferred number types:
integer -> int
decimal -> float
"

(let x (as u8 49)
  ...)

(let x ^u8 49 ;; ??
  ...)

;; uninitialised variables. easy to spot
(let x ^u8 ---
  ...)

;; boolean and bitwise ops
(not )
(or )
(and )

(b-or )
(b-and )
(b-xor )
(b-not )
(b<< x n)
(b>> x n)

;; number literals
"10
0b10
0x10
0b1010_1010_0011
"
;; character literal
#ch"x"

;; inline comment strings
; #;"a comment"

;; metadata applied to previous form
;; idea: comma for metadata? or as a more general 'compound node'
(fn [x,int y,float,:static z,:static])

;; deref
"@x = (deref x)"

;; arrays

;; static arrays
(ar u32 4)
(ar u32 [x y z])
(ar [x y z]) ;; infer type
#ar[x y z]
;; ?: multidimensional

;; java array
(Array. s32 4)

;; dynamic arrays
...

;; generic coll ops
(at my-arr 3) ;; access element
(setm my-arry 3 49) ;; set element
(adjr my-arr x) ;; adjoin (add) to the right
(adjl my-arr x) ;; left
(.reset my-arr)
(index-of my-arr x)
(.copy src dest)

(count my-arr)

;; array view
(struct
  :count s64
  :data *u8)

;; branching

(if cond then fail)

(case ^:all x
  1 (do
      (fallthrough))
  2 ...
  ...)
;; optionally ensure exhaustive handling with :all

;; alternative syntax
(case x
  (= :alpha a
    ...)
  (= :beta
    ...))
(cond (...)
  (= 0 dothing)
  (in [1 3 4] :inline x
    dothing)
  (.. 5 100 :inline x 
    dothing)
  )

;; loops

;; fallthrough and goto etc must be in tail positions
(jumppad
  (goto :loop) ;; optional init expr for jumping ahead
  :recur
  (do ;; eg i+=1
    (fallthrough))
  :loop
  (do ...
    (goto :recur)))

;; go through both lists in parallel.
;; By pointer allows mutation of elements
(doeach [item items
         ^:rev ^:ptr ;; reverse order, by pointer
         x xs
         i :idx]
  ...)
;; maybe contextual variables
(doeach items (prn &el &idx))

(doeach [it items]
  (doeach [y ys]
    (&break it))) ;; break out of outer loop (if in tail)

(scan [it items]
  (if cond
    ret
    (&scan)) ;; explicit continue
  (else-do-something)) ;; if at end of list

(doeach [it items]
  (swap! &idx + 3)) ;; skip forward/backward, if supported

(scan [it items]
  (&scan (+ &idx 3))) ;; skip forward/backward more functionally

(scan [a as]
  (scan [b bs]
    (&scan-for a)))

;; explicit
(scan [it1 items1
       it2 items2
       ;; perhaps better these done in a user-provided 'let' eg (let myel &el)
       &el :el ;; or :el1
       &el2 :el2
       &scan :scan
       &idx :idx])

(doeach [it items]
  (&remove it)) ;; unordered remove

;; TODO user provided loop impls

(doeach [i (range 0 2)] ;; range is inclusive
  :continue (do-something)
  (main-body))


;; Functions
;; are not closures by default

(fn [x^int y^float z^MyStruct] ^int
  {:or {y 4} ;; default arguments applied inline at callsite
   }
  )

(myfn 1 2 {})
(myfn 1 .z {} .y 2)
;; expressions put directly in function arguments are assumed to have
;; an order that does not matter
;; Use a construct like 'do' to ensure a certain order of evaluation.
;; This allows freedom to change the order of function parameters

;; recursion
(fn []
  (+ (&fn) 1))
(let f (fn [] (f))
  ...)

;; variadic
(fn [arg & args])
(myvf x y z)
(myvs .args y z .arg x)
;; splice
(myvf x & [y z])
(myvf .args & [y z] .arg x)

;; inlining
(^:inline myfn 1 2 {})
(inline myfn 1 2 {})
(fn :inline [])

;; compile-time arguments functions
(fn [arg^:static arg2]
  (let x ^:static (do-stuff-at-comptime arg)
    ...))

;; local macros
(let m (macro [x y] ...)
  (m ...))


(using
  my-struct
  (obj2 :only [obj2-member1]
    (obj2-member1 :only [...]))
  (do
    my-struct-member))


;; shorthand

(= 4 (:type (:children (:current item))))
(= 4 item.current.children.type) ;; seems reasonable
(= 4 item:current:children:type) ;; seems reasonable
(= 4 item/current/children/type) ;; ?? problem that locals would pollute scope of global namespace
(= (+ 1 2 3) item/current-with-some-very/
             long-name/children/type     ) ;; single multiline symbol node; i don't like it
(= 4 (-> item :current :children :type))
(= 4 (: item current children type))

;; note: prefix of . like .print has meaning that symbol is namespaced relative to the target object

"in more object-oriented cases where functions and accessors
 are context-dependent on a single object, a smalltalk style of
 expressing code makes more sense"
(< 0 (count (:items (:coll-stack parser))))
(< 0 parser,:coll-stack,:items,count)
(< 0 (-> parser :coll-stack :items count))
;; should there be a distinction between kwlookup and unary function call?
;; perhaps distinction could be mainly stylistic, with ':' meaning 'get-'
;; with semantic that lookup is cheap, inlined and has concept of an attribute
(< 0 (-> parser .coll-stack .items count))
(< 0 (count parser:coll-stack:items))
(< 0 (count (: parser coll-stack items)))
(< 0 (count (. parser coll-stack items)))
0 < parser.coll-stack.items.count()
(< 0 parser(:coll-stack)(:items)(count))

;; non lisp ideas

(defn read-next-form
  [(p *Parser)] -> Message
  (doflow
    (case (read-to-nonws p)
      [:eof (&reduced :eof)]
      [:char &val])
    :as ch
    (dosome
      ;; coll end
      (when (< 0 (count (:items coll-stack)))
        (doflow
          (parse-delimited-coll-end p ch)
          :when &prev ;; at-end?
          :coll-end))

      (when (digit? ch)
        (parse-number p ch))
      (let macro (at macro-table ch))
      (when (not= :none macro)
        (parse-macro p macro))
      ;; signed char
      (when (and (or (= ch "-") (= ch "+"))
              (< next-idx (count buf)))
        (doflow
          (let ch2 (at buf next-idx))
          :when (digit? ch2)
          (parse-number p ch)))
      ;; symbol/keyword
      (let token (read-token p))
      (if (and (< 0 (count token)) (= ":" (at token 0)))
        {:keyword token}
        {:symbol token}))))

"one problem with this is that opening brackets
get ahead of opening brackets of the contained children"
defn(read-next-form
  [(p *Parser)] -> Message
  doflow(
    case(read-to-nonws(p)
      [:eof &reduced(:eof)]
      [:char &val])
    :as ch
    dosome(
      ;; coll end
      when(<(0 count(:items(coll-stack)))
        doflow(
          (parse-delimited-coll-end p ch)
          :when &prev ;; at-end?
          :coll-end))

      when(digit?(ch)
        parse-number(p ch))
      let(macro (at macro-table ch))
      when(not=(:none macro)
        parse-macro(p macro))
      ;; signed char
      when(and(or(=(ch "-") =(ch "+"))
             <(next-idx (count buf)))
        doflow(
          let(ch2 at(buf next-idx))
          :when digit?(ch2)
          parse-number(p ch)))
      ;; symbol/keyword
      let(token (read-token p))
      if(and(<(0 count(token)) =(":" at(token 0)))
        {:keyword token}
        {:symbol token}))))


;; dependent args
Ctx (struct
      :current-idx int
      :nodes [Node])
(defn [(ctx Ctx)
       (current-node Node
         :or (at (:nodes ctx) (:current-idx ctx)))])